name: 🚀 Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  REGISTRY: ghcr.io
  PYTHON_VERSION: '3.13.5'
  NODE_VERSION: '22'

jobs:
  # 🏗️ Build and Test
  build-and-test:
    name: 🏗️ Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: 📂 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 🟨 Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
        
    - name: 📦 Install pnpm
      run: npm install -g pnpm
      
    # Backend tests
    - name: 🧪 Test backend
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        source $HOME/.cargo/env
        cd bot && uv venv && source .venv/bin/activate && uv pip install -r requirements.txt && python -m pytest tests/ -v
        cd ../api && uv venv && source .venv/bin/activate && uv pip install -r requirements.txt && python -m pytest tests/ -v
        
    # Frontend tests
    - name: 🧪 Test frontend
      run: |
        cd dashboard
        pnpm install --frozen-lockfile
        pnpm test --watchAll=false
        pnpm build

  # 🐳 Build Docker Images
  build-images:
    name: 🐳 Build Images
    runs-on: ubuntu-latest
    needs: build-and-test
    permissions:
      contents: read
      packages: write
      
    strategy:
      matrix:
        service: [bot, api, dashboard]
        
    steps:
    - name: 📂 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 📝 Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}-${{ matrix.service }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          
    - name: 🏗️ Build and push
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.service }}
        file: ./${{ matrix.service }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 📦 Create Release
  create-release:
    name: 📦 Create Release
    runs-on: ubuntu-latest
    needs: [build-and-test, build-images]
    permissions:
      contents: write
      
    steps:
    - name: 📂 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 📝 Generate changelog
      id: changelog
      run: |
        # Get the tag name
        TAG_NAME=${GITHUB_REF#refs/tags/}
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        
        # Get previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        # Generate changelog
        if [ -n "$PREVIOUS_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD)
        else
          CHANGELOG=$(git log --pretty=format:"- %s (%h)")
        fi
        
        # Create release notes
        cat > release_notes.md << EOF
        # 🎉 Tatiana Bot 2.0 - $TAG_NAME
        
        ## 🚀 What's New
        
        $CHANGELOG
        
        ## 📦 Docker Images
        
        - **Bot**: \`ghcr.io/${{ github.repository }}-bot:$TAG_NAME\`
        - **API**: \`ghcr.io/${{ github.repository }}-api:$TAG_NAME\`
        - **Dashboard**: \`ghcr.io/${{ github.repository }}-dashboard:$TAG_NAME\`
        
        ## 🚀 Quick Start
        
        \`\`\`bash
        # Download docker-compose.yml
        wget https://github.com/${{ github.repository }}/releases/download/$TAG_NAME/docker-compose.yml
        
        # Copy environment template
        wget https://github.com/${{ github.repository }}/releases/download/$TAG_NAME/.env.example -O .env
        
        # Edit .env with your values
        vim .env
        
        # Start the bot
        docker-compose up -d
        \`\`\`
        
        ## 📚 Documentation
        
        - [Quick Start Guide](https://github.com/${{ github.repository }}/blob/main/docs/QUICK_START.md)
        - [Commands Reference](https://github.com/${{ github.repository }}/blob/main/docs/COMMANDS_REFERENCE.md)
        - [Configuration Guide](https://github.com/${{ github.repository }}/blob/main/docs/CONFIGURATION.md)
        
        ## 🐛 Bug Reports & 💡 Feature Requests
        
        Please use our [GitHub Issues](https://github.com/${{ github.repository }}/issues) for bug reports and feature requests.
        
        ## 💬 Support
        
        - [Discord Server](https://discord.gg/tatiana-bot)
        - [Documentation](https://tatiana-bot.dev/docs)
        
        ---
        
        **Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...$TAG_NAME
        EOF
        
    - name: 📦 Create release assets
      run: |
        # Create release directory
        mkdir -p release-assets
        
        # Copy important files
        cp docker-compose.yml release-assets/
        cp .env.example release-assets/
        cp README.md release-assets/
        cp -r docs/ release-assets/
        
        # Create deployment script
        cat > release-assets/deploy.sh << 'EOF'
        #!/bin/bash
        echo "🚀 Deploying Tatiana Bot 2.0..."
        
        # Check if docker is installed
        if ! command -v docker &> /dev/null; then
            echo "❌ Docker is not installed. Please install Docker first."
            exit 1
        fi
        
        # Check if .env exists
        if [ ! -f .env ]; then
            echo "❌ .env file not found. Please copy .env.example to .env and configure it."
            exit 1
        fi
        
        # Pull and start services
        docker-compose pull
        docker-compose up -d
        
        echo "✅ Tatiana Bot 2.0 deployed successfully!"
        echo "📊 Check status: docker-compose ps"
        echo "📄 View logs: docker-compose logs -f"
        EOF
        
        chmod +x release-assets/deploy.sh
        
        # Create archive
        tar -czf tatiana-bot-${{ steps.changelog.outputs.tag_name }}.tar.gz -C release-assets .
        
    - name: 🎉 Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        name: "Tatiana Bot 2.0 - ${{ steps.changelog.outputs.tag_name }}"
        body_path: release_notes.md
        files: |
          tatiana-bot-${{ steps.changelog.outputs.tag_name }}.tar.gz
          release-assets/docker-compose.yml
          release-assets/.env.example
          release-assets/deploy.sh
        draft: false
        prerelease: ${{ contains(steps.changelog.outputs.tag_name, '-') }}
        generate_release_notes: true

  # 🚀 Deploy to Production (if needed)
  deploy-production:
    name: 🚀 Deploy Production
    runs-on: ubuntu-latest
    needs: create-release
    if: ${{ !contains(github.ref_name, '-') }} # Only for stable releases
    environment: production
    
    steps:
    - name: 🚀 Deploy notification
      run: |
        echo "🎉 New release ${{ github.ref_name }} is ready!"
        echo "🐳 Docker images published to GitHub Container Registry"
        echo "📦 Release assets available on GitHub Releases"
        echo "🔗 https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
        
  # 📢 Notify Discord (Optional)
  notify-discord:
    name: 📢 Discord Notification
    runs-on: ubuntu-latest
    needs: create-release
    if: success()
    
    steps:
    - name: 📢 Send Discord notification
      if: ${{ secrets.DISCORD_WEBHOOK_URL }}
      run: |
        curl -H "Content-Type: application/json" \
        -d '{
          "embeds": [{
            "title": "🎉 New Release: Tatiana Bot 2.0 '"${{ github.ref_name }}"'",
            "description": "A new version of Tatiana Bot has been released!",
            "color": 5814783,
            "fields": [
              {
                "name": "📦 Version",
                "value": "'"${{ github.ref_name }}"'",
                "inline": true
              },
              {
                "name": "🔗 Download",
                "value": "[GitHub Releases](https://github.com/'"${{ github.repository }}"'/releases/tag/'"${{ github.ref_name }}"')",
                "inline": true
              },
              {
                "name": "🐳 Docker",
                "value": "`docker pull ghcr.io/'"${{ github.repository }}"'-bot:'"${{ github.ref_name }}"'`"
              }
            ],
            "timestamp": "'"$(date -u +%Y-%m-%dT%H:%M:%SZ)"'"
          }]
        }' \
        ${{ secrets.DISCORD_WEBHOOK_URL }} 