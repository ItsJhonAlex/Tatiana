name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.13.5'
  NODE_VERSION: '22'

jobs:
  # 🧪 Python Backend Testing
  test-backend:
    name: 🐍 Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: tatiana_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:8-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: 📂 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    # Bot tests
    - name: 🤖 Install bot dependencies
      run: |
        cd bot
        curl -LsSf https://astral.sh/uv/install.sh | sh
        source $HOME/.cargo/env
        uv venv
        source .venv/bin/activate
        uv pip install -r requirements.txt
        uv pip install -r requirements-dev.txt
        
    - name: 🧪 Run bot tests
      run: |
        cd bot
        python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/tatiana_test
        REDIS_URL: redis://localhost:6379
        
    # API tests  
    - name: 🌐 Install API dependencies
      run: |
        cd api
        curl -LsSf https://astral.sh/uv/install.sh | sh
        source $HOME/.cargo/env
        uv venv
        source .venv/bin/activate
        uv pip install -r requirements.txt
        uv pip install -r requirements-dev.txt
        
    - name: 🧪 Run API tests
      run: |
        cd api
        python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/tatiana_test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-secret-key
        
    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./bot/coverage.xml,./api/coverage.xml
        flags: backend
        name: backend-coverage

  # 🟨 Frontend Testing
  test-frontend:
    name: 🌐 Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 📂 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟨 Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'
        cache-dependency-path: dashboard/pnpm-lock.yaml
        
    - name: 📦 Install pnpm
      run: npm install -g pnpm
      
    - name: 📦 Install dependencies
      run: |
        cd dashboard
        pnpm install --frozen-lockfile
        
    - name: 🔍 Run ESLint
      run: |
        cd dashboard
        pnpm lint
        
    - name: 🎨 Check Prettier formatting
      run: |
        cd dashboard
        pnpm format:check
        
    - name: 🧪 Run tests
      run: |
        cd dashboard
        pnpm test --coverage --watchAll=false
        
    - name: 🏗️ Build application
      run: |
        cd dashboard
        pnpm build
        
    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./dashboard/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # 🔍 Code Quality
  code-quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: 📂 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install Python quality tools
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        source $HOME/.cargo/env
        uv tool install black
        uv tool install flake8
        uv tool install isort
        uv tool install mypy
        uv tool install bandit
        uv tool install safety
        
    - name: 🎨 Check Black formatting
      run: |
        black --check --diff bot/ api/
        
    - name: 📏 Run flake8 linting
      run: |
        flake8 bot/ api/ --max-line-length=88 --extend-ignore=E203
        
    - name: 📦 Check import sorting
      run: |
        isort --check-only --diff bot/ api/
        
    - name: 🔒 Run security checks
      run: |
        bandit -r bot/ api/ -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
        
    - name: 📊 Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # 🐳 Docker Build Test
  docker-build:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: 📂 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🤖 Build bot image
      uses: docker/build-push-action@v5
      with:
        context: ./bot
        file: ./bot/Dockerfile.dev
        push: false
        tags: tatiana-bot:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 🌐 Build API image  
      uses: docker/build-push-action@v5
      with:
        context: ./api
        file: ./api/Dockerfile.dev
        push: false
        tags: tatiana-api:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 💻 Build dashboard image
      uses: docker/build-push-action@v5
      with:
        context: ./dashboard
        file: ./dashboard/Dockerfile.dev
        push: false
        tags: tatiana-dashboard:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 📋 Summary
  ci-summary:
    name: 📋 CI Summary
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, code-quality, docker-build]
    if: always()
    
    steps:
    - name: ✅ All checks passed
      if: ${{ needs.test-backend.result == 'success' && needs.test-frontend.result == 'success' && needs.code-quality.result == 'success' && needs.docker-build.result == 'success' }}
      run: |
        echo "🎉 All CI checks passed successfully!"
        echo "✅ Backend tests: ${{ needs.test-backend.result }}"
        echo "✅ Frontend tests: ${{ needs.test-frontend.result }}"  
        echo "✅ Code quality: ${{ needs.code-quality.result }}"
        echo "✅ Docker build: ${{ needs.docker-build.result }}"
        
    - name: ❌ Some checks failed
      if: ${{ needs.test-backend.result != 'success' || needs.test-frontend.result != 'success' || needs.code-quality.result != 'success' || needs.docker-build.result != 'success' }}
      run: |
        echo "❌ Some CI checks failed!"
        echo "Backend tests: ${{ needs.test-backend.result }}"
        echo "Frontend tests: ${{ needs.test-frontend.result }}"
        echo "Code quality: ${{ needs.code-quality.result }}"
        echo "Docker build: ${{ needs.docker-build.result }}"
        exit 1 